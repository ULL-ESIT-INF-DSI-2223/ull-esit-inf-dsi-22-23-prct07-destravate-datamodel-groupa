{"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialLength.ts":{"path":"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialLength.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":9,"column":22},"end":{"line":9,"column":24}},"3":{"start":{"line":10,"column":20},"end":{"line":10,"column":21}},"4":{"start":{"line":11,"column":22},"end":{"line":11,"column":26}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":33}},"6":{"start":{"line":24,"column":8},"end":{"line":24,"column":29}},"7":{"start":{"line":31,"column":8},"end":{"line":31,"column":33}},"8":{"start":{"line":38,"column":8},"end":{"line":38,"column":52}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":52}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":51}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":75}},"12":{"start":{"line":66,"column":8},"end":{"line":66,"column":55}},"13":{"start":{"line":73,"column":8},"end":{"line":73,"column":98}},"14":{"start":{"line":76,"column":0},"end":{"line":76,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":26},"end":{"line":18,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":25,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":26},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":14},"end":{"line":39,"column":5}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":18},"end":{"line":46,"column":5}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":5}},"line":51},"6":{"name":"(anonymous_6)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":22},"end":{"line":60,"column":5}},"line":58},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":16},"end":{"line":67,"column":5}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":22},"end":{"line":74,"column":5}},"line":72}},"branchMap":{},"s":{"0":1,"1":1,"2":8,"3":8,"4":8,"5":8,"6":5,"7":1,"8":3,"9":1,"10":2,"11":1,"12":1,"13":1,"14":1},"f":{"0":8,"1":5,"2":1,"3":3,"4":1,"5":2,"6":1,"7":1,"8":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialLength.ts","sources":["/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialLength.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,cAAc;IASH;IARH,eAAe,GAAG,EAAE,CAAC;IACrB,aAAa,GAAG,CAAC,CAAC;IAClB,eAAe,GAAG,IAAI,CAAC;IAExC;;;OAGG;IACH,YAAoB,QAAgB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IAExC;;;OAGG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,QAAgB;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,IAAY;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,MAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC;IACrE,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;IACjD,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,MAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC;IAC5F,CAAC;CACF;AA1EH,wCA0EG","sourcesContent":["/**\n * La clase ImperialLength proporciona informaci√≥n sobre unidades de longitud en el sistema imperial.\n */\nexport class ImperialLength {\n    private readonly pulgadasPorPies = 12;\n    private readonly piesPorYardas = 3;\n    private readonly yardasPorMillas = 1760;\n  \n    /**\n     * Crea una instancia de ImperialLength.\n     * @param pulgadas La longitud en pulgadas.\n     */\n    constructor(private pulgadas: number) {}\n  \n    /**\n     * Devuelve la longitud en pulgadas.\n     * @returns La longitud en pulgadas.\n     */\n    public getPulgadas(): number {\n      return this.pulgadas;\n    }\n  \n    /**\n     * Establece la longitud en pulgadas.\n     * @param pulgadas La longitud en pulgadas.\n     */\n    public setPulgadas(pulgadas: number): void {\n      this.pulgadas = pulgadas;\n    }\n  \n    /**\n     * Devuelve la longitud en pies.\n     * @returns La longitud en pies.\n     */\n    public getPies(): number {\n      return this.pulgadas / this.pulgadasPorPies;\n    }\n  \n    /**\n     * Establece la longitud en pies.\n     * @param pies La longitud en pies.\n     */\n    public setPies(pies: number): void {\n      this.pulgadas = pies * this.pulgadasPorPies;\n    }\n  \n    /**\n     * Devuelve la longitud en yardas.\n     * @returns La longitud en yardas.\n     */\n    public getYardas(): number {\n      return this.getPies() / this.piesPorYardas;\n    }\n  \n    /**\n     * Establece la longitud en yardas.\n     * @param yardas La longitud en yardas.\n     */\n    public setYardas(yardas: number): void {\n      this.pulgadas = yardas * this.piesPorYardas * this.pulgadasPorPies;\n    }\n  \n    /**\n     * Devuelve la longitud en millas.\n     * @returns La longitud en millas.\n     */\n    public getMillas(): number {\n      return this.getYardas() / this.yardasPorMillas;\n    }\n  \n    /**\n     * Establece la longitud en millas.\n     * @param millas La longitud en millas.\n     */\n    public setMillas(millas: number): void {\n      this.pulgadas = millas * this.yardasPorMillas * this.piesPorYardas * this.pulgadasPorPies;\n    }\n  }"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9e36162da0c5d1d93bfd8cdae9210cfe453ee3de","contentHash":"8b3cb65ac4b3729a20966319690f4fb98feac9f79a923ede87a3064fd7c6fbc0"},"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialMass.ts":{"path":"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialMass.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":9,"column":20},"end":{"line":9,"column":22}},"3":{"start":{"line":10,"column":22},"end":{"line":10,"column":24}},"4":{"start":{"line":11,"column":25},"end":{"line":11,"column":26}},"5":{"start":{"line":12,"column":27},"end":{"line":12,"column":29}},"6":{"start":{"line":18,"column":8},"end":{"line":18,"column":27}},"7":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":27}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":47}},"10":{"start":{"line":46,"column":8},"end":{"line":46,"column":49}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":55}},"12":{"start":{"line":60,"column":8},"end":{"line":60,"column":73}},"13":{"start":{"line":67,"column":8},"end":{"line":67,"column":59}},"14":{"start":{"line":74,"column":8},"end":{"line":74,"column":100}},"15":{"start":{"line":81,"column":8},"end":{"line":81,"column":62}},"16":{"start":{"line":88,"column":8},"end":{"line":88,"column":129}},"17":{"start":{"line":91,"column":0},"end":{"line":91,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":23},"end":{"line":19,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":15},"end":{"line":26,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":20},"end":{"line":33,"column":5}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":16},"end":{"line":40,"column":5}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":22},"end":{"line":47,"column":5}},"line":45},"5":{"name":"(anonymous_5)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":17},"end":{"line":54,"column":5}},"line":52},"6":{"name":"(anonymous_6)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":24},"end":{"line":61,"column":5}},"line":59},"7":{"name":"(anonymous_7)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":18},"end":{"line":68,"column":5}},"line":66},"8":{"name":"(anonymous_8)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":26},"end":{"line":75,"column":5}},"line":73},"9":{"name":"(anonymous_9)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":19},"end":{"line":82,"column":5}},"line":80},"10":{"name":"(anonymous_10)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":23},"end":{"line":89,"column":5}},"line":87}},"branchMap":{},"s":{"0":1,"1":1,"2":8,"3":8,"4":8,"5":8,"6":8,"7":1,"8":0,"9":7,"10":2,"11":5,"12":1,"13":3,"14":2,"15":1,"16":1,"17":1},"f":{"0":8,"1":1,"2":0,"3":7,"4":2,"5":5,"6":1,"7":3,"8":2,"9":1,"10":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialMass.ts","sources":["/home/usuario/Plantilla-DSI/src/Ejercicio-1-PE103/ImperialMass.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,YAAY;IAUD;IATH,aAAa,GAAG,EAAE,CAAC;IACnB,eAAe,GAAG,EAAE,CAAC;IACrB,kBAAkB,GAAG,CAAC,CAAC;IACvB,oBAAoB,GAAG,EAAE,CAAC;IAE3C;;;OAGG;IACH,YAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAErC;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,KAAa;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;IACzC,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,MAAc;QAC7B,IAAI,CAAC,KAAK,GAAG,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACI,UAAU;QACf,OAAO,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;IACjD,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,KAAK,GAAG,OAAO,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC;IACnE,CAAC;IAED;;;OAGG;IACI,WAAW;QAChB,OAAO,IAAI,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,kBAAkB,CAAC;IACrD,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,QAAgB;QACjC,IAAI,CAAC,KAAK,GAAG,QAAQ,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC;IAC9F,CAAC;IAED;;;OAGG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,SAAiB;QAC9B,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC;IAC3H,CAAC;CACF;AA3FH,oCA2FG","sourcesContent":["/**\n * La clase ImperialMass proporciona informaci√≥n sobre unidades de masa en el sistema imperial.\n */\nexport class ImperialMass {\n    private readonly onzasPorLibra = 16;\n    private readonly librasPorPiedra = 14;\n    private readonly piedrasPorCentenas = 4;\n    private readonly centenasPorToneladas = 20;\n  \n    /**\n     * Crea una instancia de ImperialMass.\n     * @param onzas La masa en onzas.\n     */\n    constructor(private onzas: number) {}\n  \n    /**\n     * Devuelve la masa en onzas.\n     * @returns La masa en onzas.\n     */\n    public getOnzas(): number {\n      return this.onzas;\n    }\n  \n    /**\n     * Establece la masa en onzas.\n     * @param onzas La masa en onzas.\n     */\n    public setOnzas(onzas: number): void {\n      this.onzas = onzas;\n    }\n  \n    /**\n     * Devuelve la masa en libras.\n     * @returns La masa en libras.\n     */\n    public getLibras(): number {\n      return this.onzas / this.onzasPorLibra;\n    }\n  \n    /**\n     * Establece la masa en libras.\n     * @param libras La masa en libras.\n     */\n    public setLibras(libras: number): void {\n      this.onzas = libras * this.onzasPorLibra;\n    }\n  \n    /**\n     * Devuelve la masa en piedras.\n     * @returns La masa en piedras.\n     */\n    public getPiedras(): number {\n      return this.getLibras() / this.librasPorPiedra;\n    }\n  \n    /**\n     * Establece la masa en piedras.\n     * @param piedras La masa en piedras.\n     */\n    public setPiedras(piedras: number): void {\n      this.onzas = piedras * this.librasPorPiedra * this.onzasPorLibra;\n    }\n  \n    /**\n     * Devuelve la masa en centenas.\n     * @returns La masa en centenas.\n     */\n    public getCentenas(): number {\n      return this.getPiedras() / this.piedrasPorCentenas;\n    }\n  \n    /**\n     * Establece la masa en centenas.\n     * @param centenas La masa en centenas.\n     */\n    public setCentenas(centenas: number): void {\n      this.onzas = centenas * this.piedrasPorCentenas * this.librasPorPiedra * this.onzasPorLibra;\n    }\n  \n    /**\n     * Devuelve la masa en toneladas.\n     * @returns La masa en toneladas.\n     */\n    public getToneladas(): number {\n      return this.getCentenas() / this.centenasPorToneladas;\n    }\n  \n    /**\n     * Establece la masa en toneladas.\n     * @param toneladas La masa en toneladas.\n     */\n    public setTons(toneladas: number): void {\n      this.onzas = toneladas * this.centenasPorToneladas * this.piedrasPorCentenas * this.librasPorPiedra * this.onzasPorLibra;\n    }\n  }"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3edcd73e5e2b3410c2e38ba8ed6e110a5adb313e","contentHash":"3ee133f55445b80eb1548202a339bb4b2fc480bc4e8c9413ec7143e48ad0d941"},"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricLength.ts":{"path":"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricLength.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":15,"column":8},"end":{"line":15,"column":24}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":23}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":24}},"5":{"start":{"line":39,"column":8},"end":{"line":39,"column":25}},"6":{"start":{"line":42,"column":0},"end":{"line":42,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":21},"end":{"line":16,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":20},"end":{"line":24,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":20},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":21},"end":{"line":40,"column":5}},"line":38}},"branchMap":{},"s":{"0":1,"1":1,"2":2,"3":2,"4":2,"5":2,"6":1},"f":{"0":2,"1":2,"2":2,"3":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricLength.ts","sources":["/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricLength.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,MAAa,YAAY;IACvB;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,EAAU;QACrB,OAAO,EAAE,GAAG,GAAG,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,CAAS;QACpB,OAAO,CAAC,GAAG,GAAG,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,CAAS;QACpB,OAAO,CAAC,GAAG,IAAI,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,EAAU;QACrB,OAAO,EAAE,GAAG,IAAI,CAAC;IACnB,CAAC;CACF;AApCD,oCAoCC","sourcesContent":["/**\n * Clase para trabajar con diferentes unidades de longitud del sistema m√©trico\n * @class MetricLength\n */\nexport class MetricLength {\n  /**\n   * Convierte una longitud en cent√≠metros a metros\n   * @param {number} cm - Longitud en cent√≠metros\n   * @returns {number} Longitud en metros\n   */\n  static cmToM(cm: number): number {\n    return cm / 100;\n  }\n\n  /**\n   * Convierte una longitud en metros a cent√≠metros\n   * @param {number} m - Longitud en metros\n   * @returns {number} Longitud en cent√≠metros\n   */\n  static mToCm(m: number): number {\n    return m * 100;\n  }\n\n  /**\n   * Convierte una longitud en metros a kil√≥metros\n   * @param {number} m - Longitud en metros\n   * @returns {number} Longitud en kil√≥metros\n   */\n  static mToKm(m: number): number {\n    return m / 1000;\n  }\n\n  /**\n   * Convierte una longitud en kil√≥metros a metros\n   * @param {number} km - Longitud en kil√≥metros\n   * @returns {number} Longitud en metros\n   */\n  static kmToM(km: number): number {\n    return km * 1000;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e33de66e9bae02342554a5136bb6ef9d17f36f23","contentHash":"f0d6dfdfb1805fde321ae93232d808223d2b7660b2e8b6046d09c7371c9b7333"},"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricMass.ts":{"path":"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricMass.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":15,"column":8},"end":{"line":15,"column":24}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":25}},"4":{"start":{"line":31,"column":8},"end":{"line":31,"column":25}},"5":{"start":{"line":39,"column":8},"end":{"line":39,"column":24}},"6":{"start":{"line":42,"column":0},"end":{"line":42,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":20},"end":{"line":16,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":21},"end":{"line":24,"column":5}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":21},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":20},"end":{"line":40,"column":5}},"line":38}},"branchMap":{},"s":{"0":1,"1":1,"2":2,"3":2,"4":2,"5":2,"6":1},"f":{"0":2,"1":2,"2":2,"3":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricMass.ts","sources":["/home/usuario/Plantilla-DSI/src/Ejercicio-2-PE103/MetricMass.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,MAAa,UAAU;IACrB;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,CAAS;QACpB,OAAO,CAAC,GAAG,IAAI,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,EAAU;QACrB,OAAO,EAAE,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,EAAU;QACrB,OAAO,EAAE,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,CAAS;QACpB,OAAO,CAAC,GAAG,IAAI,CAAC;IAClB,CAAC;CACF;AApCD,gCAoCC","sourcesContent":["/**\n * Clase para trabajar con diferentes unidades de masa del sistema m√©trico\n * @class MetricMass\n */\nexport class MetricMass {\n  /**\n   * Convierte una masa en gramos a kilogramos\n   * @param {number} g - Masa en gramos\n   * @returns {number} Masa en kilogramos\n   */\n  static gToKg(g: number): number {\n    return g / 1000;\n  }\n\n  /**\n   * Convierte una masa en kilogramos a gramos\n   * @param {number} kg - Masa en kilogramos\n   * @returns {number} Masa en gramos\n   */\n  static kgToG(kg: number): number {\n    return kg * 1000;\n  }\n\n  /**\n   * Convierte una masa en kilogramos a toneladas\n   * @param {number} kg - Masa en kilogramos\n   * @returns {number} Masa en toneladas\n   */\n  static kgToT(kg: number): number {\n    return kg / 1000;\n  }\n\n  /**\n   * Convierte una masa en toneladas a kilogramos\n   * @param {number} t - Masa en toneladas\n   * @returns {number} Masa en kilogramos\n   */\n  static tToKg(t: number): number {\n    return t * 1000;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"638f0f8364691c36aa44a90cdc65e502cec3728d","contentHash":"6a9b9bdd75086a78ffcec860eae7664d8c044de30a7032420c382c5ada2ef87e"}}